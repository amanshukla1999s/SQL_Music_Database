--1. who is the most senior employee based on job title?
select * from employee
select top 1 first_name , last_name
from employee
order by levels desc

--2. which countries have the most invoices?
select * from invoice
select top 1 billing_country, count(*) as invoice_count
from invoice
group by billing_country
order by invoice_count desc

--3. what are top 3 values of the invoice?
select * from invoice
select top 3 total
from invoice
order by total desc

--4. which city has the most customers? we would like to 
--   throw a promotional music festival in the city we made 
--   the most money. write a query that returns one city that
-- has the highest sum of invoice totoals. return both the city
-- name & sum of all invoice totals?
select * from invoice
select top 1 billing_city , sum(total) as total_invoice
from invoice
group by billing_city
order by total_invoice desc

--5. who is the best customer? the customer who has spent the most
-- money will be declared the best customer. write a query that
-- returns the persons who has spent the most money
select * from invoice 
select * from customer
select top 1  c.customer_id , first_name, last_name , sum(total) as total_amount
from customer c
join invoice i on c.customer_id = i.customer_id
group by c.customer_id, first_name
order by total_amount desc;

--question set 2 - moderate
-- 1. write query to return the email, first name , last name & genre of all rock 
--music listeners. return your list ordered alphabetically by email starting with a
select * from customer
select distinct email, first_name , last_name
from customer
join invoice on customer.customer_id = invoice.customer_id
join invoice_line on invoice.invoice_id = invoice_line.invoice_id
where track_id = any
     (select track_id from track
	 join genre on track.genre_id = genre.genre_id
	 where genre.name like 'rock'
	 group by email;

--2. let's invite the artists who have written the most rock music in our dataset. write a
-- query that returns the artist name and total track count of the top 10 rock bands
select * from track 
select top 10 artist.artist_id, artist.name , count(artist.artist_id) as total_songs
from track
join album on album.album_id = track.album_id
join artist on artist.artist_id = album.artist_id
join genre on genre.genre_id = track.genre_id
where genre.name like 'rock'
group by artist.name , artist.artist_id
order by total_songs desc

--3. return all the track names that have a song length longer than the average song length
-- return the name and milliseconds for each track. order by the song length with the
-- longest songs listed first
select * from track
select name , milliseconds
from track
where milliseconds> (
                      select AVG(milliseconds) as total_length
					  from track
					  )
 order by milliseconds
